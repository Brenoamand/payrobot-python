# coding: utf-8

"""
    Payrobot API Documentation & Reference

    # Introduction Accept, store, send or forward Bitcoin, Litecoin and Bitcoin Cash for your website or app and protect your privacy.  Supported crytocurrencies:   * BTC Bitcoin   * LTC Litecoin   * BCH Bitcoin Cash   ## Benefits    * **Anonymous** No personal details are required and transactions are mixed among all payments. You can forward your payments so as soon payrobot.io receives it forwards it to another address under your control.      * **No Registration** No registration, sign-up, application or form required to use payrobot.io      * **Easy Integration** Integrate your web / app through our simple RESTful API, you can accept payments with just one line of code!      * **Instant Payment Notification** Our servers notify your web / app the status of your payments. No polling, daemons or cronjobs required on your side!      * **Secure** Payrobot.io works with SSL and bank-level security protocols. Your transactions are safe!   ## Features **Payment Forward** Generate one-time addresses to recieve payments. Payrobot will notify your web /app through callbacks (webhooks) the status of the payment. As soon as it's confirmed the payment is forwarded to your desired address.  **Wallet** Receive, send payments and store your coins in a secure, private and anonymous wallet. All events are notified to your web / app through callbacks (webhooks). You can generate wallets with just one line of code without registration or further information  ## Fees **Only 0.90% per inbound transaction** (receive payments), NO HIDDEN FEES. All outbound transactions (send funds) are totally free.  Minimum fees applies, therefore the largest amount is going to be considered as fee either: `(inboundAmount*feePct)` or `the minimum fee`  **Inbound Fees (Receive payments)**    - `Bitcoin` 0.90% *(Minimum fee 0.00005 BTC)*   - `Litecoin` 0.90% *(Minimum fee 0.0005 LTC)*   - `Bitcoin Cash` 0.90% *(Minimum fee 0.0005 BCH)*     **Outbound Fees (Send funds)**    - `Bitcoin` 0.00%   - `Litecoin` 0.00%   - `Bitcoin Cash` 0.00%   ## Rate Limit To guarantee the good performance of the service and its fair use. The API is **limited to receiving 120 requests per minute per IP**, which is sufficient for most use cases.  Payrobot.io is asynchronous in most API methods to communicate with your application through callbacks (webhooks), thus reducing unnecessary calls to the service.  **If the limit is exceeded, the IP will be banned for 1 minute.**  If you require an upper limit for your application, do not hesitate to contact us  ## Considerations    * Amounts in responses are expresed as `strings`      * Wallets are not multi-currency, you have to create a different wallet per cryptocurrency (You can't store Litecoin in a Bitcoin wallet and vice-versa)      * Payment forwarding has to be of the same type of currency (You can't forward a Bitcoin Cash payment to a Bitcoin address and vice-versa)      # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: contact@payrobot.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from payrobot.configuration import Configuration


class PaymentRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'CryptoCurrency',
        'payment_id': 'str',
        'address': 'str',
        'pin': 'str',
        'type': 'int',
        'amount': 'str',
        'callback': 'str',
        'fee_pct': 'float',
        'fee_amount': 'str',
        'final_amount': 'str',
        'destination': 'str',
        'reference': 'str',
        'timestamp': 'int',
        'lastupdate': 'int',
        'status': 'int',
        'error': 'bool'
    }

    attribute_map = {
        'currency': 'currency',
        'payment_id': 'paymentId',
        'address': 'address',
        'pin': 'pin',
        'type': 'type',
        'amount': 'amount',
        'callback': 'callback',
        'fee_pct': 'feePct',
        'fee_amount': 'feeAmount',
        'final_amount': 'finalAmount',
        'destination': 'destination',
        'reference': 'reference',
        'timestamp': 'timestamp',
        'lastupdate': 'lastupdate',
        'status': 'status',
        'error': 'error'
    }

    def __init__(self, currency=None, payment_id=None, address=None, pin=None, type=None, amount=None, callback=None, fee_pct=0.9, fee_amount=None, final_amount=None, destination=None, reference=None, timestamp=None, lastupdate=None, status=None, error=None, local_vars_configuration=None):  # noqa: E501
        """PaymentRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._currency = None
        self._payment_id = None
        self._address = None
        self._pin = None
        self._type = None
        self._amount = None
        self._callback = None
        self._fee_pct = None
        self._fee_amount = None
        self._final_amount = None
        self._destination = None
        self._reference = None
        self._timestamp = None
        self._lastupdate = None
        self._status = None
        self._error = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if payment_id is not None:
            self.payment_id = payment_id
        if address is not None:
            self.address = address
        if pin is not None:
            self.pin = pin
        if type is not None:
            self.type = type
        if amount is not None:
            self.amount = amount
        if callback is not None:
            self.callback = callback
        if fee_pct is not None:
            self.fee_pct = fee_pct
        if fee_amount is not None:
            self.fee_amount = fee_amount
        if final_amount is not None:
            self.final_amount = final_amount
        if destination is not None:
            self.destination = destination
        if reference is not None:
            self.reference = reference
        if timestamp is not None:
            self.timestamp = timestamp
        if lastupdate is not None:
            self.lastupdate = lastupdate
        if status is not None:
            self.status = status
        if error is not None:
            self.error = error

    @property
    def currency(self):
        """Gets the currency of this PaymentRequest.  # noqa: E501


        :return: The currency of this PaymentRequest.  # noqa: E501
        :rtype: CryptoCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentRequest.


        :param currency: The currency of this PaymentRequest.  # noqa: E501
        :type: CryptoCurrency
        """

        self._currency = currency

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentRequest.  # noqa: E501

        Unique identifier of the payment in selected currency  # noqa: E501

        :return: The payment_id of this PaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentRequest.

        Unique identifier of the payment in selected currency  # noqa: E501

        :param payment_id: The payment_id of this PaymentRequest.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def address(self):
        """Gets the address of this PaymentRequest.  # noqa: E501

        One-use address for receive your client payment  # noqa: E501

        :return: The address of this PaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PaymentRequest.

        One-use address for receive your client payment  # noqa: E501

        :param address: The address of this PaymentRequest.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def pin(self):
        """Gets the pin of this PaymentRequest.  # noqa: E501

        PIN, it will be required if you need support with this payment.\\ *Note: It's provided only the first time you create the payment request*  # noqa: E501

        :return: The pin of this PaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this PaymentRequest.

        PIN, it will be required if you need support with this payment.\\ *Note: It's provided only the first time you create the payment request*  # noqa: E501

        :param pin: The pin of this PaymentRequest.  # noqa: E501
        :type: str
        """

        self._pin = pin

    @property
    def type(self):
        """Gets the type of this PaymentRequest.  # noqa: E501

        * `0: Receive and forward` payment is forwarded to a desired coin address once it's confirmed  * `1: Receive and store` payment is stored in a payrobot.io wallet   # noqa: E501

        :return: The type of this PaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentRequest.

        * `0: Receive and forward` payment is forwarded to a desired coin address once it's confirmed  * `1: Receive and store` payment is stored in a payrobot.io wallet   # noqa: E501

        :param type: The type of this PaymentRequest.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def amount(self):
        """Gets the amount of this PaymentRequest.  # noqa: E501

        The payment amount your client has to send to the coin address  # noqa: E501

        :return: The amount of this PaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentRequest.

        The payment amount your client has to send to the coin address  # noqa: E501

        :param amount: The amount of this PaymentRequest.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def callback(self):
        """Gets the callback of this PaymentRequest.  # noqa: E501

        URL where payrobot.io will send the status of the payment (Webhook)  # noqa: E501

        :return: The callback of this PaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this PaymentRequest.

        URL where payrobot.io will send the status of the payment (Webhook)  # noqa: E501

        :param callback: The callback of this PaymentRequest.  # noqa: E501
        :type: str
        """

        self._callback = callback

    @property
    def fee_pct(self):
        """Gets the fee_pct of this PaymentRequest.  # noqa: E501

        Fee percentage that will be discounted  # noqa: E501

        :return: The fee_pct of this PaymentRequest.  # noqa: E501
        :rtype: float
        """
        return self._fee_pct

    @fee_pct.setter
    def fee_pct(self, fee_pct):
        """Sets the fee_pct of this PaymentRequest.

        Fee percentage that will be discounted  # noqa: E501

        :param fee_pct: The fee_pct of this PaymentRequest.  # noqa: E501
        :type: float
        """

        self._fee_pct = fee_pct

    @property
    def fee_amount(self):
        """Gets the fee_amount of this PaymentRequest.  # noqa: E501

        Fee amount that will be discounted  # noqa: E501

        :return: The fee_amount of this PaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this PaymentRequest.

        Fee amount that will be discounted  # noqa: E501

        :param fee_amount: The fee_amount of this PaymentRequest.  # noqa: E501
        :type: str
        """

        self._fee_amount = fee_amount

    @property
    def final_amount(self):
        """Gets the final_amount of this PaymentRequest.  # noqa: E501

        Final amount of the transaction (Fee discount is already applied)   * For `Receive and forward` payment is the total amount to `forward` as soon as the payment is confirmed         * For `Receive and forward` payment is the total amount to `store` in the wallet as soon as the payment is confirmed  # noqa: E501

        :return: The final_amount of this PaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._final_amount

    @final_amount.setter
    def final_amount(self, final_amount):
        """Sets the final_amount of this PaymentRequest.

        Final amount of the transaction (Fee discount is already applied)   * For `Receive and forward` payment is the total amount to `forward` as soon as the payment is confirmed         * For `Receive and forward` payment is the total amount to `store` in the wallet as soon as the payment is confirmed  # noqa: E501

        :param final_amount: The final_amount of this PaymentRequest.  # noqa: E501
        :type: str
        """

        self._final_amount = final_amount

    @property
    def destination(self):
        """Gets the destination of this PaymentRequest.  # noqa: E501

        * For `Receive and forward` payment is the coin `ADDRESS` where the payment is going to be forwarded as soon as it's confirmed  * For `Receive and store` payment is the `WALLET ID` where the payment is going to be stored as soon as it's confirmed   # noqa: E501

        :return: The destination of this PaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this PaymentRequest.

        * For `Receive and forward` payment is the coin `ADDRESS` where the payment is going to be forwarded as soon as it's confirmed  * For `Receive and store` payment is the `WALLET ID` where the payment is going to be stored as soon as it's confirmed   # noqa: E501

        :param destination: The destination of this PaymentRequest.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def reference(self):
        """Gets the reference of this PaymentRequest.  # noqa: E501

        Custom reference for payment identifying  # noqa: E501

        :return: The reference of this PaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentRequest.

        Custom reference for payment identifying  # noqa: E501

        :param reference: The reference of this PaymentRequest.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def timestamp(self):
        """Gets the timestamp of this PaymentRequest.  # noqa: E501

        Request creation date expressed in UNIX timestamp  # noqa: E501

        :return: The timestamp of this PaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PaymentRequest.

        Request creation date expressed in UNIX timestamp  # noqa: E501

        :param timestamp: The timestamp of this PaymentRequest.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def lastupdate(self):
        """Gets the lastupdate of this PaymentRequest.  # noqa: E501

        Last update expressed in UNIX timestamp  # noqa: E501

        :return: The lastupdate of this PaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._lastupdate

    @lastupdate.setter
    def lastupdate(self, lastupdate):
        """Sets the lastupdate of this PaymentRequest.

        Last update expressed in UNIX timestamp  # noqa: E501

        :param lastupdate: The lastupdate of this PaymentRequest.  # noqa: E501
        :type: int
        """

        self._lastupdate = lastupdate

    @property
    def status(self):
        """Gets the status of this PaymentRequest.  # noqa: E501

        Status of the payment:    * `0: Idle` payment has not been paid    * `1: Incomplete` payment is being paid partially    * `2: Confirming` payment has been received completely but it's not confirmed by network yet    * `3: Confirmed` payment has been paid completely and it has at least `1` confirmation by network   # noqa: E501

        :return: The status of this PaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentRequest.

        Status of the payment:    * `0: Idle` payment has not been paid    * `1: Incomplete` payment is being paid partially    * `2: Confirming` payment has been received completely but it's not confirmed by network yet    * `3: Confirmed` payment has been paid completely and it has at least `1` confirmation by network   # noqa: E501

        :param status: The status of this PaymentRequest.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def error(self):
        """Gets the error of this PaymentRequest.  # noqa: E501

        `true` is there was a problem. `false` if not   # noqa: E501

        :return: The error of this PaymentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this PaymentRequest.

        `true` is there was a problem. `false` if not   # noqa: E501

        :param error: The error of this PaymentRequest.  # noqa: E501
        :type: bool
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentRequest):
            return True

        return self.to_dict() != other.to_dict()
